/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    managers: ManagerAuthOperations;
    clients: ClientAuthOperations;
  };
  blocks: {};
  collections: {
    meditations: Meditation;
    music: Music;
    pages: Page;
    lessons: Lesson;
    'lesson-units': LessonUnit;
    frames: Frame;
    media: Media;
    narrators: Narrator;
    'media-tags': MediaTag;
    'meditation-tags': MeditationTag;
    'music-tags': MusicTag;
    managers: Manager;
    clients: Client;
    forms: Form;
    'form-submissions': FormSubmission;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    'media-tags': {
      media: 'media';
    };
    'meditation-tags': {
      meditations: 'meditations';
    };
    'music-tags': {
      music: 'music';
    };
  };
  collectionsSelect: {
    meditations: MeditationsSelect<false> | MeditationsSelect<true>;
    music: MusicSelect<false> | MusicSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    lessons: LessonsSelect<false> | LessonsSelect<true>;
    'lesson-units': LessonUnitsSelect<false> | LessonUnitsSelect<true>;
    frames: FramesSelect<false> | FramesSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    narrators: NarratorsSelect<false> | NarratorsSelect<true>;
    'media-tags': MediaTagsSelect<false> | MediaTagsSelect<true>;
    'meditation-tags': MeditationTagsSelect<false> | MeditationTagsSelect<true>;
    'music-tags': MusicTagsSelect<false> | MusicTagsSelect<true>;
    managers: ManagersSelect<false> | ManagersSelect<true>;
    clients: ClientsSelect<false> | ClientsSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    'payload-jobs-stats': PayloadJobsStat;
  };
  globalsSelect: {
    'payload-jobs-stats': PayloadJobsStatsSelect<false> | PayloadJobsStatsSelect<true>;
  };
  locale: 'en' | 'cs';
  user:
    | (Manager & {
        collection: 'managers';
      })
    | (Client & {
        collection: 'clients';
      });
  jobs: {
    tasks: {
      resetClientUsage: TaskResetClientUsage;
      trackClientUsage: TaskTrackClientUsage;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface ManagerAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
export interface ClientAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "meditations".
 */
export interface Meditation {
  id: string;
  title: string;
  locale: 'en' | 'cs';
  publishAt?: string | null;
  slug?: string | null;
  thumbnail: string | Media;
  /**
   * Duration in seconds
   */
  duration?: number | null;
  narrator: string | Narrator;
  tags?: (string | MeditationTag)[] | null;
  /**
   * Music with this tag will be offered to the seeker
   */
  musicTag?: (string | null) | MusicTag;
  /**
   * Frames associated with this meditation with audio-synchronized editing
   */
  frames?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  fileMetadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
  deletedAt?: string | null;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  /**
   * Tags to categorize this image
   */
  tags?: (string | MediaTag)[] | null;
  /**
   * Attribution or copyright information
   */
  credit?: string | null;
  fileMetadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    card?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    tablet?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media-tags".
 */
export interface MediaTag {
  id: string;
  name: string;
  media?: {
    docs?: (string | Media)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "narrators".
 */
export interface Narrator {
  id: string;
  name: string;
  gender: 'male' | 'female';
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "meditation-tags".
 */
export interface MeditationTag {
  id: string;
  /**
   * This label will be used in the editor
   */
  name: string;
  /**
   * This localized title will be shown to public users
   */
  title: string;
  meditations?: {
    docs?: (string | Meditation)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "music-tags".
 */
export interface MusicTag {
  id: string;
  /**
   * This label will be used in the editor
   */
  name: string;
  /**
   * This localized title will be shown to public users
   */
  title: string;
  music?: {
    docs?: (string | Music)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "music".
 */
export interface Music {
  id: string;
  title: string;
  slug?: string | null;
  tags?: (string | MusicTag)[] | null;
  /**
   * Attribution or credit information
   */
  credit?: string | null;
  fileMetadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
  deletedAt?: string | null;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title: string;
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
  };
  slug?: string | null;
  slugLock?: boolean | null;
  publishAt?: string | null;
  category: 'technique' | 'artwork' | 'event' | 'knowledge';
  tags?: ('living' | 'creativity' | 'wisdom' | 'stories' | 'events')[] | null;
  updatedAt: string;
  createdAt: string;
  deletedAt?: string | null;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lessons".
 */
export interface Lesson {
  id: string;
  /**
   * The name of this lesson
   */
  title: string;
  /**
   * Visual thumbnail for the lesson
   */
  thumbnail: string | Media;
  /**
   * Theme color for this lesson (hex format, e.g., #FF0000)
   */
  color: string;
  /**
   * The unit this lesson belongs to
   */
  unit: string | LessonUnit;
  /**
   * Order within the unit (must be unique per unit)
   */
  order: number;
  /**
   * Optional related guided meditation
   */
  meditation?: (string | null) | Meditation;
  /**
   * Optional related article for deeper exploration of lesson topics
   */
  article?: (string | null) | Page;
  /**
   * Content panels for this lesson
   */
  panels: {
    title: string;
    text: string;
    image: string | Media;
    id?: string | null;
  }[];
  /**
   * Schedule when this lesson should be published
   */
  publishAt?: string | null;
  alt?: string | null;
  fileMetadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  createdAt: string;
  updatedAt: string;
  deletedAt?: string | null;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lesson-units".
 */
export interface LessonUnit {
  id: string;
  /**
   * The name of this lesson unit
   */
  title: string;
  /**
   * Theme color for this lesson unit (hex format, e.g., #FF0000)
   */
  color: string;
  /**
   * Number of lessons in this unit
   */
  lessonCount?: number | null;
  createdAt: string;
  updatedAt: string;
  deletedAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "frames".
 */
export interface Frame {
  id: string;
  previewUrl?: string | null;
  imageSet: 'male' | 'female';
  category:
    | 'mooladhara'
    | 'swadhistan'
    | 'nabhi'
    | 'void'
    | 'anahat'
    | 'vishuddhi'
    | 'agnya'
    | 'sahasrara'
    | 'clearing'
    | 'kundalini'
    | 'meditate'
    | 'ready'
    | 'namaste';
  tags?:
    | (
        | 'anahat'
        | 'back'
        | 'bandhan'
        | 'both hands'
        | 'center'
        | 'channel'
        | 'earth'
        | 'ego'
        | 'feel'
        | 'ham ksham'
        | 'hamsa'
        | 'hand'
        | 'hands'
        | 'ida'
        | 'left'
        | 'lefthanded'
        | 'massage'
        | 'pingala'
        | 'raise'
        | 'right'
        | 'righthanded'
        | 'rising'
        | 'silent'
        | 'superego'
        | 'tapping'
      )[]
    | null;
  /**
   * Auto-generated thumbnail for video frames
   */
  thumbnail?: (string | null) | Media;
  duration?: number | null;
  fileMetadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "managers".
 */
export interface Manager {
  id: string;
  name: string;
  /**
   * Admin users bypass all permission restrictions and have complete access to all collections and features.
   */
  admin?: boolean | null;
  /**
   * Granular permissions for specific collections and locales. Adding the same collection multiple times may cause inconsistent behaviour.
   */
  permissions?:
    | {
        /**
         * Select the collection to grant permissions for
         */
        allowedCollection: 'meditations' | 'music' | 'frames' | 'media' | 'lessons' | 'lesson-units' | 'pages';
        /**
         * Translate: Can edit localized fields only. Manage: Full create/update/delete access within specified locales.
         */
        level: 'translate' | 'manage';
        /**
         * Select which locales this permission applies to. "All Locales" grants unrestricted locale access.
         */
        locales: ('all' | 'en' | 'cs')[];
        id?: string | null;
      }[]
    | null;
  /**
   * Enable or disable this user
   */
  active?: boolean | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "clients".
 */
export interface Client {
  id: string;
  /**
   * Client organization or application name
   */
  name: string;
  /**
   * Purpose and usage notes for this client
   */
  notes?: string | null;
  /**
   * Granular permissions for specific collections and locales. Adding the same collection multiple times may cause inconsistent behaviour.
   */
  permissions?:
    | {
        /**
         * Select the collection to grant permissions for
         */
        allowedCollection: 'meditations' | 'music' | 'frames' | 'media' | 'lessons' | 'lesson-units' | 'pages';
        /**
         * Translate: Can edit localized fields only. Manage: Full create/update/delete access within specified locales.
         */
        level: 'read' | 'manage';
        /**
         * Select which locales this permission applies to. "All Locales" grants unrestricted locale access.
         */
        locales: ('all' | 'en' | 'cs')[];
        id?: string | null;
      }[]
    | null;
  /**
   * Users who can manage this client
   */
  managers: (string | Manager)[];
  /**
   * Primary user contact for this client
   */
  primaryContact: string | Manager;
  /**
   * What domains are associated with this client. Put each domain on a new line.
   */
  domains?: string | null;
  /**
   * Enable or disable API access for this client
   */
  active?: boolean | null;
  /**
   * Timestamp of last API key generation
   */
  keyGeneratedAt?: string | null;
  /**
   * API usage statistics
   */
  usageStats?: {
    /**
     * All-time request count
     */
    totalRequests?: number | null;
    /**
     * Today's request count
     */
    dailyRequests?: number | null;
    /**
     * Maximum historical request count
     */
    maxDailyRequests?: number | null;
    /**
     * Last API call timestamp
     */
    lastRequestAt?: string | null;
    /**
     * Indicates if daily limit exceeded (>1000 requests)
     */
    highUsageAlert?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
  enableAPIKey?: boolean | null;
  apiKey?: string | null;
  apiKeyIndex?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: string;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            placeholder?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: string;
  form: string | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: string;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'resetClientUsage' | 'trackClientUsage';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'resetClientUsage' | 'trackClientUsage') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  meta?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'meditations';
        value: string | Meditation;
      } | null)
    | ({
        relationTo: 'music';
        value: string | Music;
      } | null)
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'lessons';
        value: string | Lesson;
      } | null)
    | ({
        relationTo: 'lesson-units';
        value: string | LessonUnit;
      } | null)
    | ({
        relationTo: 'frames';
        value: string | Frame;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'narrators';
        value: string | Narrator;
      } | null)
    | ({
        relationTo: 'media-tags';
        value: string | MediaTag;
      } | null)
    | ({
        relationTo: 'meditation-tags';
        value: string | MeditationTag;
      } | null)
    | ({
        relationTo: 'music-tags';
        value: string | MusicTag;
      } | null)
    | ({
        relationTo: 'managers';
        value: string | Manager;
      } | null)
    | ({
        relationTo: 'clients';
        value: string | Client;
      } | null)
    | ({
        relationTo: 'forms';
        value: string | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: string | FormSubmission;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: string | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user:
    | {
        relationTo: 'managers';
        value: string | Manager;
      }
    | {
        relationTo: 'clients';
        value: string | Client;
      };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user:
    | {
        relationTo: 'managers';
        value: string | Manager;
      }
    | {
        relationTo: 'clients';
        value: string | Client;
      };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "meditations_select".
 */
export interface MeditationsSelect<T extends boolean = true> {
  title?: T;
  locale?: T;
  publishAt?: T;
  slug?: T;
  thumbnail?: T;
  duration?: T;
  narrator?: T;
  tags?: T;
  musicTag?: T;
  frames?: T;
  fileMetadata?: T;
  updatedAt?: T;
  createdAt?: T;
  deletedAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "music_select".
 */
export interface MusicSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  tags?: T;
  credit?: T;
  fileMetadata?: T;
  updatedAt?: T;
  createdAt?: T;
  deletedAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  content?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  slug?: T;
  slugLock?: T;
  publishAt?: T;
  category?: T;
  tags?: T;
  updatedAt?: T;
  createdAt?: T;
  deletedAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lessons_select".
 */
export interface LessonsSelect<T extends boolean = true> {
  title?: T;
  thumbnail?: T;
  color?: T;
  unit?: T;
  order?: T;
  meditation?: T;
  article?: T;
  panels?:
    | T
    | {
        title?: T;
        text?: T;
        image?: T;
        id?: T;
      };
  publishAt?: T;
  alt?: T;
  fileMetadata?: T;
  createdAt?: T;
  updatedAt?: T;
  deletedAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lesson-units_select".
 */
export interface LessonUnitsSelect<T extends boolean = true> {
  title?: T;
  color?: T;
  lessonCount?: T;
  createdAt?: T;
  updatedAt?: T;
  deletedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "frames_select".
 */
export interface FramesSelect<T extends boolean = true> {
  previewUrl?: T;
  imageSet?: T;
  category?: T;
  tags?: T;
  thumbnail?: T;
  duration?: T;
  fileMetadata?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  tags?: T;
  credit?: T;
  fileMetadata?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        card?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        tablet?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "narrators_select".
 */
export interface NarratorsSelect<T extends boolean = true> {
  name?: T;
  gender?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media-tags_select".
 */
export interface MediaTagsSelect<T extends boolean = true> {
  name?: T;
  media?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "meditation-tags_select".
 */
export interface MeditationTagsSelect<T extends boolean = true> {
  name?: T;
  title?: T;
  meditations?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "music-tags_select".
 */
export interface MusicTagsSelect<T extends boolean = true> {
  name?: T;
  title?: T;
  music?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "managers_select".
 */
export interface ManagersSelect<T extends boolean = true> {
  name?: T;
  admin?: T;
  permissions?:
    | T
    | {
        allowedCollection?: T;
        level?: T;
        locales?: T;
        id?: T;
      };
  active?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "clients_select".
 */
export interface ClientsSelect<T extends boolean = true> {
  name?: T;
  notes?: T;
  permissions?:
    | T
    | {
        allowedCollection?: T;
        level?: T;
        locales?: T;
        id?: T;
      };
  managers?: T;
  primaryContact?: T;
  domains?: T;
  active?: T;
  keyGeneratedAt?: T;
  usageStats?:
    | T
    | {
        totalRequests?: T;
        dailyRequests?: T;
        maxDailyRequests?: T;
        lastRequestAt?: T;
        highUsageAlert?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  enableAPIKey?: T;
  apiKey?: T;
  apiKeyIndex?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              placeholder?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        state?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  meta?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs-stats".
 */
export interface PayloadJobsStat {
  id: string;
  stats?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs-stats_select".
 */
export interface PayloadJobsStatsSelect<T extends boolean = true> {
  stats?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskResetClientUsage".
 */
export interface TaskResetClientUsage {
  input?: unknown;
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskTrackClientUsage".
 */
export interface TaskTrackClientUsage {
  input: {
    clientId: string;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}