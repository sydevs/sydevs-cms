/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
    clients: ClientAuthOperations;
  };
  blocks: {};
  collections: {
    meditations: Meditation;
    music: Music;
    frames: Frame;
    meditationFrames: MeditationFrame;
    media: Media;
    narrators: Narrator;
    users: User;
    tags: Tag;
    clients: Client;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    tags: {
      meditations: 'meditations';
      music: 'music';
      media: 'media';
      frames: 'frames';
    };
  };
  collectionsSelect: {
    meditations: MeditationsSelect<false> | MeditationsSelect<true>;
    music: MusicSelect<false> | MusicSelect<true>;
    frames: FramesSelect<false> | FramesSelect<true>;
    meditationFrames: MeditationFramesSelect<false> | MeditationFramesSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    narrators: NarratorsSelect<false> | NarratorsSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    tags: TagsSelect<false> | TagsSelect<true>;
    clients: ClientsSelect<false> | ClientsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user:
    | (User & {
        collection: 'users';
      })
    | (Client & {
        collection: 'clients';
      });
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
export interface ClientAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "meditations".
 */
export interface Meditation {
  id: string;
  title: string;
  slug?: string | null;
  thumbnail: string | Media;
  /**
   * Duration in seconds
   */
  duration?: number | null;
  narrator: string | Narrator;
  tags?: (string | Tag)[] | null;
  /**
   * Music with this tag will be offered to the seeker
   */
  musicTag?: (string | null) | Tag;
  isPublished?: boolean | null;
  publishedDate?: string | null;
  /**
   * Frames associated with this meditation with audio-synchronized editing
   */
  frames?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  /**
   * Tags to categorize this image
   */
  tags?: (string | Tag)[] | null;
  /**
   * Attribution or copyright information
   */
  credit?: string | null;
  /**
   * Auto-populated image dimensions (width/height)
   */
  dimensions?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    card?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    tablet?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags".
 */
export interface Tag {
  id: string;
  title: string;
  meditations?: {
    docs?: (string | Meditation)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  music?: {
    docs?: (string | Music)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  media?: {
    docs?: (string | Media)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  frames?: {
    docs?: (string | Frame)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "music".
 */
export interface Music {
  id: string;
  title: string;
  slug?: string | null;
  /**
   * Duration in seconds
   */
  duration?: number | null;
  tags?: (string | Tag)[] | null;
  /**
   * Attribution or credit information
   */
  credit?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "frames".
 */
export interface Frame {
  id: string;
  name: string;
  /**
   * Whether this frame is for male or female meditation poses
   */
  imageSet: 'male' | 'female';
  tags?: (string | Tag)[] | null;
  /**
   * Auto-populated dimensions for images (width/height)
   */
  dimensions?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Auto-populated duration for videos (in seconds)
   */
  duration?: number | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "narrators".
 */
export interface Narrator {
  id: string;
  name: string;
  slug?: string | null;
  gender?: ('male' | 'female') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "meditationFrames".
 */
export interface MeditationFrame {
  id: string;
  meditation: string | Meditation;
  frame: string | Frame;
  /**
   * Timestamp in seconds - used for ordering frames within a meditation
   */
  timestamp: number;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "clients".
 */
export interface Client {
  id: string;
  /**
   * Client organization or application name
   */
  name: string;
  /**
   * Purpose and usage notes for this client
   */
  notes?: string | null;
  /**
   * Access level for this client (currently only Full Access)
   */
  role: 'full-access';
  /**
   * Users who can manage this client
   */
  managers: (string | User)[];
  /**
   * Primary user contact for this client
   */
  primaryContact: string | User;
  /**
   * Enable or disable API access for this client
   */
  active?: boolean | null;
  /**
   * Timestamp of last API key generation
   */
  keyGeneratedAt?: string | null;
  /**
   * API usage statistics
   */
  usageStats?: {
    /**
     * All-time request count
     */
    totalRequests?: number | null;
    /**
     * Today's request count
     */
    dailyRequests?: number | null;
    /**
     * Last API call timestamp
     */
    lastRequestAt?: string | null;
    /**
     * Last daily counter reset
     */
    lastResetAt?: string | null;
    /**
     * Indicates if daily limit exceeded (>1000 requests)
     */
    highUsageAlert?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
  enableAPIKey?: boolean | null;
  apiKey?: string | null;
  apiKeyIndex?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'meditations';
        value: string | Meditation;
      } | null)
    | ({
        relationTo: 'music';
        value: string | Music;
      } | null)
    | ({
        relationTo: 'frames';
        value: string | Frame;
      } | null)
    | ({
        relationTo: 'meditationFrames';
        value: string | MeditationFrame;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'narrators';
        value: string | Narrator;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'tags';
        value: string | Tag;
      } | null)
    | ({
        relationTo: 'clients';
        value: string | Client;
      } | null);
  globalSlug?: string | null;
  user:
    | {
        relationTo: 'users';
        value: string | User;
      }
    | {
        relationTo: 'clients';
        value: string | Client;
      };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user:
    | {
        relationTo: 'users';
        value: string | User;
      }
    | {
        relationTo: 'clients';
        value: string | Client;
      };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "meditations_select".
 */
export interface MeditationsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  thumbnail?: T;
  duration?: T;
  narrator?: T;
  tags?: T;
  musicTag?: T;
  isPublished?: T;
  publishedDate?: T;
  frames?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "music_select".
 */
export interface MusicSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  duration?: T;
  tags?: T;
  credit?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "frames_select".
 */
export interface FramesSelect<T extends boolean = true> {
  name?: T;
  imageSet?: T;
  tags?: T;
  dimensions?: T;
  duration?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "meditationFrames_select".
 */
export interface MeditationFramesSelect<T extends boolean = true> {
  meditation?: T;
  frame?: T;
  timestamp?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  tags?: T;
  credit?: T;
  dimensions?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        card?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        tablet?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "narrators_select".
 */
export interface NarratorsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  gender?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags_select".
 */
export interface TagsSelect<T extends boolean = true> {
  title?: T;
  meditations?: T;
  music?: T;
  media?: T;
  frames?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "clients_select".
 */
export interface ClientsSelect<T extends boolean = true> {
  name?: T;
  notes?: T;
  role?: T;
  managers?: T;
  primaryContact?: T;
  active?: T;
  keyGeneratedAt?: T;
  usageStats?:
    | T
    | {
        totalRequests?: T;
        dailyRequests?: T;
        lastRequestAt?: T;
        lastResetAt?: T;
        highUsageAlert?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  enableAPIKey?: T;
  apiKey?: T;
  apiKeyIndex?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}